#!/usr/bin/env python
import time
import roslib; roslib.load_manifest('ur_driver')
import rospy
import actionlib
from std_msgs.msg import String
from control_msgs.msg import *
from trajectory_msgs.msg import *

global press_key
press_key = "0"

def callback(msg):
    global press_key
    press_key = msg.data

if __name__ == '__main__':
    rospy.Subscriber("/keys", String, callback)
    rospy.init_node("test1", disable_signals=True)
    robot_client = actionlib.SimpleActionClient('follow_joint_trajectory', FollowJointTrajectoryAction)

    print "Waiting for server..."
    robot_client.wait_for_server()
    print "Connected to server"

    z = [3.14, 2.8,3.14,3.14,3.14,1.5]
    z1 = [0, 0.2, 0,0,0,0.4]

    # Joint names
    joint_names = ['base_joint','shoulder_joint', 'elbow_joint', 'wrist_pitch_joint','wrist_roll_joint', 'gripper_joint']
    q = [0, 0, 0, 0, 0, 1]

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        robot_client.cancel_goal()
        rospy.Subscriber("/keys", String, callback)        

        if press_key=="q":
            if q[0]<= z[0]:
                q[0] = q[0]+0.05
                
        if press_key=="a":
            if q[0]>= z1[0]:
                q[0] = q[0]-0.05

        if press_key=="w":
            if q[1]<= z[1]:
                q[1] = q[1]+0.05
    
        if press_key=="s":
            if q[1]>= z1[1]:
                q[1] = q[1]-0.05

        if press_key=="e":
            if q[2]<= z[2]:
                q[2] = q[2]+0.05
        
        if press_key=="d":
            if q[2]>= z1[2]:
                q[2] = q[2]-0.05

        if press_key=="r":
            if q[3]<= z[3]:
                q[3] = q[3]+0.05

        if press_key=="f":
            if q[3]>= z1[3]:
                q[3] = q[3]-0.05

        if press_key=="t":
            if q[4]<= z[4]:
                q[4] = q[4]+0.05

        if press_key=="g":
            if q[5]>= z1[5]:
                q[5] = q[5]-0.05

        if press_key=="y":
            if q[5]<= z[5]:
                q[5] = q[5]+0.05
       
        if press_key=="h":
            if q[5]>= z1[5]:
                q[5] = q[5]-0.05



        g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6, time_from_start=rospy.Duration(0.01))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()

    
    rospy.init_node("test1", disable_signals=True)

    robot_client = actionlib.SimpleActionClient('follow_joint_trajectory', FollowJointTrajectoryAction)

    print "Waiting for server..."
    robot_client.wait_for_server()
    print "Connected to server"
    joint_names = ['base_joint','shoulder_joint', 'elbow_joint', 'wrist_pitch_joint','wrist_roll_joint', 'gripper_joint']
    q = [0, 0, 0, 0, 0, 1]

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    rate = rospy.Rate(100)
    while not rospy.is_shutdown():
        robot_client.cancel_goal()

        # Modification of the motion
        q[0] = q[0]-0.005

        g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6, time_from_start=rospy.Duration(0.008))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()
