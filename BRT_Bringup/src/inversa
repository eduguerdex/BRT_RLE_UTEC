#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import Float64
from std_msgs.msg import Float64MultiArray
from BraccioDEV import *

# Initialize the node
rospy.init_node("sendJointsGzNode")

print('starting motion ... ')
# Posicion esperada
# X, Y, Z
xd = np.array([-0.2, -0.1, 0.13])

m1=0
m2=0.75
m3=3.1415
m4=3.14
m5=1.57
m6=0

topic1 = '/robot/joint1_position_controller/command'
topic2 = '/robot/joint2_position_controller/command'
topic3 = '/robot/joint3_position_controller/command'
topic4 = '/robot/joint4_position_controller/command'
topic5 = '/robot/joint5_position_controller/command'
topicg = '/robot/gripper/command'
topic6 = '/robot/joint6_position_controller/command'

pub1 = rospy.Publisher(topic1, Float64, queue_size=10, latch=True)
pub2 = rospy.Publisher(topic2, Float64, queue_size=10, latch=True)
pub3 = rospy.Publisher(topic3, Float64, queue_size=10, latch=True)
pub4 = rospy.Publisher(topic4, Float64, queue_size=10, latch=True)
pub5 = rospy.Publisher(topic5, Float64, queue_size=10, latch=True)
pubg = rospy.Publisher(topicg, Float64, queue_size=10, latch=True)
pub6 = rospy.Publisher(topic6, Float64MultiArray, queue_size=10, latch=True)
    
j1 = Float64()
j2 = Float64()
j3 = Float64()
j4 = Float64()
j5 = Float64()
jg = Float64()
j6 = Float64MultiArray()

j1.data=m1
j2.data=m2
j3.data=m3
j4.data=m4
j5.data=m5
j6.data=m6
jg.data=m6

pub1.publish(j1)
pub2.publish(j2)
pub3.publish(j3)
pub4.publish(j4)
pub5.publish(j5)
pubg.publish(jg)
pub6.publish(j6)

# Initial configuration
q0 = np.array([m1,m2,m3,m4,m5])

# Resulting initial position (end effector with respect to the base link)
T = fkine_BRT(q0)
x0 = T[0:3,3]

print("Posicion deseada")
print(xd)
print("Posicion inicial y orientacion del efector final")
print(np.round(T,3))

q=ik_gradient_BRT(xd, q0)

print('ending motion ...')
print("Posicion final y orientacion del efector final")
Td = fkine_BRT(q)
print(np.round(Td,3))


# Initial configuration
ms1=np.round(q[0]*180/3.1415,1)
ms2=np.round(q[1]*180/3.1415,1)
ms3=np.round(q[2]*180/3.1415,1)
ms4=np.round(q[3]*180/3.1415,1)
ms5=np.round(q[4]*180/3.1415,1)
k = np.array([ms1,ms2,ms3,ms4,ms5])
print("Angulos resultantes grados")
print(np.round(k,3))
pos = Td[0:3,3]
rmax=0.39
ractual=np.linalg.norm(pos)
print("Pos")
print(np.round(pos,3))
print("ractual")
print(np.round(ractual,3))

if ractual>rmax:
	q = np.array([m1,m2,m3,m4,m5])

if __name__ == "__main__":


    topic1 = '/robot/joint1_position_controller/command'
    topic2 = '/robot/joint2_position_controller/command'
    topic3 = '/robot/joint3_position_controller/command'
    topic4 = '/robot/joint4_position_controller/command'
    topic5 = '/robot/joint5_position_controller/command'
    topicg = '/robot/gripper/command'
    topic6 = '/robot/joint6_position_controller/command'
    pub1 = rospy.Publisher(topic1, Float64, queue_size=10, latch=True)
    pub2 = rospy.Publisher(topic2, Float64, queue_size=10, latch=True)
    pub3 = rospy.Publisher(topic3, Float64, queue_size=10, latch=True)
    pub4 = rospy.Publisher(topic4, Float64, queue_size=10, latch=True)
    pub5 = rospy.Publisher(topic5, Float64, queue_size=10, latch=True)
    pubg = rospy.Publisher(topicg, Float64, queue_size=10, latch=True)
    pub6 = rospy.Publisher(topic6, Float64MultiArray, queue_size=10, latch=True)
    
    j1 = Float64()
    j2 = Float64()
    j3 = Float64()
    j4 = Float64()
    j5 = Float64()
    jg = Float64()
    j6 = Float64MultiArray()

    m1=[1.57,1.57,0   ,0   ,0   ,1.57]
    m2=[1.1 ,1.1,1.57 ,1.57,1.57,1.57]
    m3=[0.6 ,0.6 ,0.5 ,0   ,0   ,1.57]
    m4=[0   ,0   ,0.7 ,0.7 ,0.7 ,1.57]
    m5=[1.57,1.57,0   ,1.57,1.57,1.57]
    m6=[0.5 ,0.5 ,3.1 ,3.1 ,3.1,3.1]

    i=0
    j=0
    rate = rospy.Rate(5)
    while i <len(m1):
        while j <len(q):
            if q[j]<0:
                q[j]=0
            if q[j]>3.14:
                q[j]=3.14
            j+=1

        j1.data = np.round(q[0],2)
        j2.data = np.round(q[1],2)
        j3.data = np.round(q[2],2)
        j4.data = np.round(q[3],2)
        j5.data = np.round(q[4],2)
        j6.data = [m6[i], m6[i]]
        jg.data = m6[i]

        MOVE=np.array([j1,j2,j3,j4,j5,jg])
	JMOVE=np.array([q[0],q[1],q[2],q[3],q[4]])
        print('MOVE')
        print(MOVE)
        

        pub1.publish(j1)
        pub2.publish(j2)
        pub3.publish(j3)
        pub4.publish(j4)
        pub5.publish(j5)
        pubg.publish(jg)
        pub6.publish(j6)

        time.sleep(3)
        i+=1
    while not rospy.is_shutdown():
	print("Posicion final y orientacion del efector final")
	Tfinal = fkine_BRT(JMOVE)
	print(np.round(Tfinal,2))
        rate.sleep()
	break
